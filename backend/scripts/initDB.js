const { MongoClient } = require('mongodb');
require('dotenv').config();

const uri = process.env.MONGODB_URI;

if (!uri) {
  console.error('‚ùå Error: MONGODB_URI no est√° definida en las variables de entorno');
  process.exit(1);
}

const client = new MongoClient(uri);

async function initDB() {
  try {
    console.log('üîÑ Conectando a MongoDB Atlas...');
    await client.connect();
    console.log('‚úÖ Conectado exitosamente a MongoDB Atlas');
    
    const db = client.db("verifireando");
    console.log('üìä Usando base de datos: verifireando');

    // Verificar colecciones existentes
    const collections = await db.listCollections().toArray();
    const existing = collections.map(c => c.name);
    console.log('üìã Colecciones existentes:', existing);

    // Colecciones requeridas para Verifireando
    const required = ["users", "drivers", "appointments", "cars", "notifications", "payments"];
    
    console.log('üîç Verificando colecciones requeridas...');
    for (const col of required) {
      if (!existing.includes(col)) {
        await db.createCollection(col);
        console.log(`‚úÖ Colecci√≥n creada: ${col}`);
      } else {
        console.log(`‚ÑπÔ∏è  Colecci√≥n ya existe: ${col}`);
      }
    }

    // Crear √≠ndices importantes
    console.log('üîß Creando √≠ndices...');
    
    // √çndices para users
    await db.collection('users').createIndex({ email: 1 }, { unique: true });
    console.log('‚úÖ √çndice √∫nico creado en users.email');
    
    // √çndices para drivers
    await db.collection('drivers').createIndex({ email: 1 }, { unique: true });
    await db.collection('drivers').createIndex({ licenseNumber: 1 }, { unique: true });
    await db.collection('drivers').createIndex({ "vehicleInfo.plates": 1 }, { unique: true });
    console.log('‚úÖ √çndices creados en drivers');
    
    // √çndices para appointments
    await db.collection('appointments').createIndex({ appointmentNumber: 1 }, { unique: true });
    await db.collection('appointments').createIndex({ client: 1 });
    await db.collection('appointments').createIndex({ driver: 1 });
    await db.collection('appointments').createIndex({ status: 1 });
    await db.collection('appointments').createIndex({ scheduledDate: 1 });
    console.log('‚úÖ √çndices creados en appointments');
    
    // √çndices para cars
    await db.collection('cars').createIndex({ plates: 1 }, { unique: true });
    await db.collection('cars').createIndex({ owner: 1 });
    console.log('‚úÖ √çndices creados en cars');
    
    // √çndices para notifications
    await db.collection('notifications').createIndex({ recipient: 1 });
    await db.collection('notifications').createIndex({ createdAt: -1 });
    console.log('‚úÖ √çndices creados en notifications');
    
    // √çndices para payments
    await db.collection('payments').createIndex({ paymentNumber: 1 }, { unique: true });
    await db.collection('payments').createIndex({ appointment: 1 });
    console.log('‚úÖ √çndices creados en payments');

    console.log('üéâ Base de datos inicializada correctamente');
    console.log('üìä Estad√≠sticas:');
    
    for (const col of required) {
      const count = await db.collection(col).countDocuments();
      console.log(`   - ${col}: ${count} documentos`);
    }

  } catch (error) {
    console.error('‚ùå Error inicializando base de datos:', error);
    process.exit(1);
  } finally {
    await client.close();
    console.log('üîå Conexi√≥n cerrada');
  }
}

// Ejecutar inicializaci√≥n
initDB().catch(console.dir);